{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/feby-tw/ta1-introds-group4/blob/main/%5C\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Bagian 1: Pengumpulan Data\n",
        "> ***Esra Frans Sunaryo Purba***"
      ],
      "metadata": {
        "id": "Oy1DsLw9XcJz"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 105,
      "metadata": {
        "id": "Mv9WbzHPh1lo"
      },
      "outputs": [],
      "source": [
        "# Import Libraries\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.decomposition import PCA"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Membaca Dataset\n",
        "> ***Mochammad Chafiedz Afrilian***"
      ],
      "metadata": {
        "id": "NorRhtOUXlIC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Upload file CSV\n",
        "from google.colab import files\n",
        "files.upload()"
      ],
      "metadata": {
        "id": "EzFM3pzewNRl",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        },
        "collapsed": true,
        "outputId": "a63e8743-9a68-4fc4-cdbb-be081689420e"
      },
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-af3d2c7b-8a2b-4212-b7a7-f05021568f94\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-af3d2c7b-8a2b-4212-b7a7-f05021568f94\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{}"
            ]
          },
          "metadata": {},
          "execution_count": 106
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Load Dataset\n",
        "df = pd.read_csv('dirty_cafe_sales.csv')"
      ],
      "metadata": {
        "id": "QqT4t-02h-MI"
      },
      "execution_count": 118,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Eksplorasi Data\n",
        "> ***Mochammad Chafiedz Afrilian***"
      ],
      "metadata": {
        "id": "VFAyPXvkytTE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# struktur data\n",
        "print(\"Dimensi dataset:\", df.shape)\n",
        "print(\"\\nTipe data setiap kolom:\")\n",
        "print(df.dtypes)\n",
        "\n",
        "print(\"\\nInfo dataset:\")\n",
        "print(df.info())\n",
        "print(df.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N7fko2_5a4Vw",
        "outputId": "66bdffca-3130-4855-8fac-8e34c1b85157"
      },
      "execution_count": 119,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dimensi dataset: (10000, 8)\n",
            "\n",
            "Tipe data setiap kolom:\n",
            "Transaction ID      object\n",
            "Item                object\n",
            "Quantity            object\n",
            "Price Per Unit      object\n",
            "Total Spent         object\n",
            "Payment Method      object\n",
            "Location            object\n",
            "Transaction Date    object\n",
            "dtype: object\n",
            "\n",
            "Info dataset:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 10000 entries, 0 to 9999\n",
            "Data columns (total 8 columns):\n",
            " #   Column            Non-Null Count  Dtype \n",
            "---  ------            --------------  ----- \n",
            " 0   Transaction ID    10000 non-null  object\n",
            " 1   Item              9667 non-null   object\n",
            " 2   Quantity          9862 non-null   object\n",
            " 3   Price Per Unit    9821 non-null   object\n",
            " 4   Total Spent       9827 non-null   object\n",
            " 5   Payment Method    7421 non-null   object\n",
            " 6   Location          6735 non-null   object\n",
            " 7   Transaction Date  9841 non-null   object\n",
            "dtypes: object(8)\n",
            "memory usage: 625.1+ KB\n",
            "None\n",
            "  Transaction ID    Item Quantity Price Per Unit Total Spent  Payment Method  \\\n",
            "0    TXN_1961373  Coffee        2            2.0         4.0     Credit Card   \n",
            "1    TXN_4977031    Cake        4            3.0        12.0            Cash   \n",
            "2    TXN_4271903  Cookie        4            1.0       ERROR     Credit Card   \n",
            "3    TXN_7034554   Salad        2            5.0        10.0         UNKNOWN   \n",
            "4    TXN_3160411  Coffee        2            2.0         4.0  Digital Wallet   \n",
            "\n",
            "   Location Transaction Date  \n",
            "0  Takeaway       2023-09-08  \n",
            "1  In-store       2023-05-16  \n",
            "2  In-store       2023-07-19  \n",
            "3   UNKNOWN       2023-04-27  \n",
            "4  In-store       2023-06-11  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# statistik deskriptif\n",
        "print(\"\\nStatistik numerik:\")\n",
        "print(df.describe())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "REszBNnPy48N",
        "outputId": "91fe5716-d4b3-4542-ae17-df347f1e666b"
      },
      "execution_count": 120,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Statistik numerik:\n",
            "       Transaction ID   Item Quantity Price Per Unit Total Spent  \\\n",
            "count           10000   9667     9862           9821        9827   \n",
            "unique          10000     10        7              8          19   \n",
            "top       TXN_9226047  Juice        5            3.0         6.0   \n",
            "freq                1   1171     2013           2429         979   \n",
            "\n",
            "        Payment Method  Location Transaction Date  \n",
            "count             7421      6735             9841  \n",
            "unique               5         4              367  \n",
            "top     Digital Wallet  Takeaway          UNKNOWN  \n",
            "freq              2291      3022              159  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# cek missing value\n",
        "print(\"\\nJumlah missing values per kolom:\")\n",
        "print(df.isnull().sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wZODLY1Ty7Xm",
        "outputId": "1049e4b2-f65d-423d-cfa8-8b0015d09708"
      },
      "execution_count": 121,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Jumlah missing values per kolom:\n",
            "Transaction ID         0\n",
            "Item                 333\n",
            "Quantity             138\n",
            "Price Per Unit       179\n",
            "Total Spent          173\n",
            "Payment Method      2579\n",
            "Location            3265\n",
            "Transaction Date     159\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# cek duplicate data\n",
        "print(\"Jumlah data duplikat:\", df.duplicated().sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xIApXDn-y9GV",
        "outputId": "74f8753c-3a2b-44e2-baaa-1eec533062ea"
      },
      "execution_count": 122,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Jumlah data duplikat: 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Visualisasi Data Missing Values Sebelum Cleaning\n",
        "> ***Feby Tri Wulandari***"
      ],
      "metadata": {
        "id": "R8A0ngAU01Ze"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Visualisasi missing values\n",
        "plt.figure(figsize=(10,7))\n",
        "plt.imshow(df.isnull(), cmap='YlGnBu', interpolation='none', aspect='auto')\n",
        "plt.colorbar(label='Missing Value')\n",
        "plt.title('Missing Values Heatmap', fontsize=15)\n",
        "plt.xticks(ticks=np.arange(len(df.columns)), labels=df.columns, rotation=45, ha='right')\n",
        "plt.ylabel('Index')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 632
        },
        "id": "oYadzC1j1FPr",
        "outputId": "558b7912-e77e-4b7e-d9f7-83baa9db579b"
      },
      "execution_count": 123,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x700 with 2 Axes>"
            ],
            "image/png": "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9thjHuNtfvrpJ7355ps+bztTpkzq0KGDJKlHjx6SpPvuuy/JGJDECQwmT57scVnRN998o1deecWrfTZs2FBSQtXn8rEaGzdu1NChQ5N9zjPPPKOgoCB169Yt2ZtBnj59WlOnTtW5c+ck+e/f6lrbXaBAAYWFhWnz5s369ttv3evFxcVp4MCByQZB6e/qxvbt26//i0hGmTJldPz4cc2ZM8dj+ZgxY9zH90pWrVqlqVOneiwbNmyY9u3bp8qVK+vWW2+97u0FAL/z38RrANISXTal89V4M6Xz8ePHTZJlzpzZateube3bt7c2bdq4b4RZokQJO3bsmJmZbdiwwX1/mQYNGljHjh3t7rvvtvz585skq169up0/f9697atN6Zzc9LtXmnb66NGjVqpUKZNkRYoUsfvvv98iIyMtc+bM1rdvX/dNO32xdu1aj2mJv/322yTrbN++3XLkyOG+n0n79u3t1ltvNZfL5b7J5T+P95WmdI6Pj3cfgwIFCtg999xjt956q2XJkuWK2zIzmzhxogUHB5skq1SpkrVp08Z9k8iQkBCTZMePHzcz7/+t/s213nzTm3abmY0aNcp9vifefLNEiRKWLVs269OnT7I3t5w3b557WuZ27dpZjx49rEePHu7H/20a7Sv9O/3z9V/uvffec58vt956q3Xo0MEqVKhgQUFBNmDAgH+dyrtXr17mcrmsZs2a1qFDB6tYsaK77Smd2hoA0hsqNQAclTNnTk2YMEF33nmnjh49qgULFujLL7/UDTfcoBEjRmjdunXKmzevJOk///mPXnvtNTVq1Ej79u3TRx99pFWrVql48eIaM2aMvvrqK4WEhDjSznz58um7777TI488ori4OM2fP1/79u3TK6+8oqeeekqS3O30VrVq1VS+fHlJCdP71q1bN8k6ZcqU0dq1a3XnnXfq2LFjWrBggU6fPq23337b60qNy+XSJ598okcffVQul0uLFi3Sn3/+qXHjxv3rth599FGtXbtWXbt21alTp/TZZ5/p888/1+nTp9WpUyd99tlnCgsLk+Tff6trabckPf3005oxY4YqV66sb7/9Vl988YWqVKmi77//XtWrV092H23atNGYMWNUtGhRffrpp5oyZYqmTJni2Gvq1KmTFi5cqNq1a2vjxo1avHixChcurC+//FJ33XXXvz73vvvu04IFCxQcHKxP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SYQaAADgOMKg9wiC3rH4WH834epcLudvjsmYGgAAcDV0NJFaCILeiYk5rbCwef5uBvyEUAMAAACkBm6+6RhCDQAAcBxVBwBOItQAAOAFOucAfEalxjGEGgAA4DjGInmPAA2kHKEGQIZAh8l7dJiQmjjfAEmuv36c3kcAItQAyBDoMAEAELgINQAAAEAqsCCXzOExL05vP60i1AAAAMdxiaj3qEADKUeoAQDAC3TOfUMHHZDkciX8OL2PAESoAdIYOky+ocMEAEDgItQAaQydcyBt428UgM+4T41jCDUAAHiBaqpvCIMAnESoAQAAjiMMeo8gCKQcoQYAAC/Q0QTgM26+6ZggfzcAAAAAAK4FlRoAAOA4Lj/zHlXBjCfIJQU5XVII0EoNoQYAAC/QOfcNHXQATiLUAADgBTrnviEMeo9zLePh3pvOIdQAAADH0UEH4CRCDQAAXqDigNRCEMx4qNQ4h1ADAIAX6GgCQNpDqAEAAABSgcvlksvhUorT20+r0sx9al588UW5XC7179/fvez8+fPq06eP8ubNq5w5c6pt27Y6fPiwx/P27dunli1bKnv27CpQoICefPJJXbp0yWOdlStX6pZbblFISIhKlSql6dOnp8IrAgAAANKHCRMmqESJEsqaNatq1aqlH3/88V/XP3HihPr06aNChQopJCREZcqU0aJFi1KptUmliVCzZs0avf3226pcubLH8gEDBujTTz/V//73P3311Vc6ePCg2rRp4348Li5OLVu21MWLF/Xdd99pxowZmj59uoYOHepeZ8+ePWrZsqUaN26sjRs3qn///nrooYf0+eefp9rrAwAAABLH1Dj94605c+YoKipKw4YN0/r161WlShVFRkbqyJEjya5/8eJFNWvWTHv37tWHH36o7du365133lGRIkWu8Qj5zmVm5re9Szp9+rRuueUWvfXWW3r++edVtWpVjR07VidPnlT+/Pk1a9YstWvXTpK0bds2lS9fXqtXr1bt2rW1ePFitWrVSgcPHlR4eLgkadKkSRo4cKCOHj2qLFmyaODAgVq4cKE2b97s3mf79u114sQJLVmyJEVtjImJUVhYmE6eXKfQ0JzX/yAAAADgmsTEnFZYWDWdPHlSoaGh/m6Oh8S+ZMnXFykoWw5H9xV/7oz2RLXw6jjUqlVLNWrU0Pjx4xO2ER+viIgI9evXT4MG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3nnnHeXLl++6bPN68GuoKVSokCpUqOCxrHz58po3L+GELFiwoCTp8OHDKlSokHudw4cPq2rVqu51/jmI6dKlS/rzzz/dzy9YsKAOHz7ssU7i74nrXO5K5TkAAOhoAkgPQkNDUzSmJl++fAoODk62r5xcP3n37t3au3ev7rzzTvey+Ph4SQlXS23fvl3/+c9/rrH13vNrqKlXr562b9/usWzHjh0qXry4JKlkyZIqWLCgli9f7g4xMTEx+uGHH9SrVy9JUp06dXTixAmtW7dO1apVkyR9+eWXio+PV61atdzrPPPMM4qNjVXmzJklScuWLVPZsmWTXHoGAACuPypc3iNAZzwulzl+c0xvt58lSxZVq1ZNy5cvV+vWrSUlhJTly5erb9++SdYvV66cfv75Z49lQ4YM0alTpzRu3Di/Xd3k11AzYMAA1a1bVy+88ILuu+8+/fjjj5o8ebJ7qmWXy6X+/fvr+eefV+nSpVWyZEk9++yzKly4sPugly9fXrfffrsefvhhTZo0SbGxserbt6/at2+vwoULS5I6duyoESNGqEePHho4cKA2b96scePGacyYMf566QAABBQ66EDaFRUVpa5du6p69eqqWbOmxo4dqzNnzqhbt26SpC5duqhIkSIaPXq0smbNqkqVKnk8P3fu3JKUZHlq8muoqVGjhj7++GMNHjxYI0eOVMmSJTV27Fh16tTJvc5TTz2lM2fOqGfPnjpx4oTq16+vJUuWKGvWrO513n//ffXt21dNmjRx33zzjTfecD8eFhampUuXqk+fPqpWrZry5cunoUOHetzLBgAAAHBSWr355v3336+jR49q6NChio6OVtWqVbVkyRL35AH79u1TUJBfb295VX69T016wX1qAAAA0rb0cJ+aASs+UUhOh+9Tc/qMxjS+O00eByf5tVIDAAACA2NqvMclexlPat6nJtAE6usGAAAAkEFQqQHSGL7N9A3faCK18DfqG/5GASnIZQpyePYzp7efVhFqgDSGD34gbeNv1DeEQe9xrgEpR6iBY/gA8w0fYkDaxnubb3hvA9Lu7GcZAaEGjuEDDEBGxHubbwiD3uNcA1KOUAMAABxHBx2QXKlQqXEFaKWG2c8AAAAApGtUagAAgOO4/AxOs/hYfzfhqoL/+nF6H4GIUAMAABzH5WdwWkzMaYWFzfN3M+AnhBoAALxAxQGp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2eOPP+7xnP79+1tkZKT9+eef/mgykGKEGj84ePCgtWzZ0iZPnuxeNmPGDGvUqJG1adPGfflPXFycxcfH2+7du+22226zuXPnmhkdzURr16613LlzW58+feyRRx6xLFmyWK9evWz37t0e640bN85y585tR48e9VNL/efUqVP29NNPW3BwsEVGRlr27Nk9OtyJ59K4ceOsb9++litXLnO5XPbSSy/5q8lpRuKx+WenceTIkRYUFOQRbI4dO2b9+/e3Pn362ObNm1O1nWnF5e9LGzdutCZNmtj69evt4MGDNnr0aKtdu7Z17drVHWxWrFhho0ePtmeffdZiY2PNzNz/H0guP7+2bdtma9eudX/ptX37dmvatKm1adPGFi1aZGZmx48ftzvvvNN9edU/txHodu7caQ8++KBVrVrV42/UzOzAgQM2YsQI+/XXX/3UOv+6dOmSvfjii+Zyueyhhx4yl8tl06dPdz8+e/Zsy5cvnw0YMMCOHDlimzZtsqeeespy585tP//8sx9bDqQMocYPfv75Z2vRooU1atTIZs6c6V5+ebBJrNiYmT311FNWrVo1O3DggD+amybt3LnThg4daqNGjXIvmzZtmhUtWtSioqKSBJtAG1eTWI0xMzt9+rTdcsst5nK5bMiQIWaW0AG9dOmSR0c0NjbW1q5day1btrS7777bH81OMxKPy8qVK23o0KH2/PPP2549e9ydx+SCjZnnWLhA9cEHH1irVq2sa9euHmOMxo4da7Vq1bIHH3zQHWwuv0Y/EK/Xv/zvb/DgwXbjjTdavnz5LDw83J544gk7cuSIrV+/3lq1amWFCxe2SpUqWfny5e2mm25y/30H6pdcia97w4YN9uGHH9qsWbPcn5G7du2yBx980GrXrp3kbzQQz7PLnT171tq2bWsul8seeOABj8f++OMPe+edd+yGG26wIkWKWPny5a1KlSq2fv16P7UW8A6hxk82btxo7du3t/r1618x2Pz222/20ksvWa5cuQL2cpbkHDhwwKpXr2558+a1J554wuOxKVOmWJEiRezJJ5+0HTt2uJcH0gf/9u3brVWrVu7B6mfPnrWePXtajx49LDQ01OMb3uQ+4Ddu3GjBwcG2cuXKVGtzWrRo0SILDg62O+64w7Jly2Z169a12bNnu4/ZyJEjLWvWrDZu3LiAOr/+zfnz5613795WtGhR96Djyx8bO3as1a1b11q3bh3wkylcbsyYMZYvXz5buHCh7dq1y1588UWrW7euPfDAA/bnn3/aoUOHbMWKFTZkyBB788033YEm0Dvo//vf/yx//vxWtmxZK1GihIWGhrqvaEis2Nx66602duxYP7c07bhw4YI9/PDD1rJlSwsLC0v22Bw+fNiWLVtm69ats8OHD/uhlYBvCDV+tGHDhisGm2bNmlmRIkUsS5YsScaJBKrLO44zZ8608uXLW61atZJ8izRt2jTLmjWrPfPMMwH/zfm0adPcncejR4/aM888Y7ly5fIINmbmvrQg8Zv12rVr27x581K3sWlA4us/fPiwde/e3d555x0zMzt58qTdfvvtVq9ePXv//ffdncmBAwda3rx5A64SmCi5y57+/PNPe/bZZy0iIsIGDhzo0fE+f/68Pf/88/bwww9zyZQlvKddvHjRWrVqZc8884zHY9OnT7cKFSrYxIkTk31uIF6qd7mNGzdanjx5bNq0aXbs2DE7evSo9evXz7Jmzep+79q6dau1a9fOmjdvHrB/o8mJi4uzY8eO2bBhwyxXrlxJgs3Bgwf91DLg2hBq/OxKweadd96xJk2acB2r/R1mLly44NFBmjt3rlWtWtW6detmGzdu9HjOe++951GpCRSXdxSjo6Mtd+7cVqNGDXe4279/vz377LMWGhpqY8eOtdjYWGvVqpX17t3b/by33nrLXC5Xkkv4MqLE43V5B3HVqlV2++23W926dW3NmjXu5ceOHbMWLVpY3bp17YMPPnCfi4E4VsvM81xbs2aNffvtt+4vYM6cOWODBw+2WrVq2TPPPOOx7sWLF684XilQ3XHHHdavXz8z86y+PPjgg3bzzTf7q1lpxpw5c9zTqif67LPPrEqVKvbHH394fOHVu3dvy5s3r3v9Xbt2BXQnPfHYbNu2zVatWmVff/21+7H9+/fb8OHD3Z8HZmbDhw+3du3aeUxmBKQXhJo04PJg895777mXJ977IpAlviEvWbLE2rZt6x40u2fPHjNLuH6/WrVq9uCDDwb8JXr79u1z//f8+fPt4sWLtnbtWitXrpzVrl3bHWx+//13e+6558zlclm5cuWsfPnyHhWtI0eOBFSY3rdvn/Xo0cO2b99uZma7d++2ChUqWFBQkE2ZMsVj3T///NPuuusuq1Chgvu+UYEoubEgN910k+XK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99/91MK05cKFC7Z9+3arVq2aVa9e3bJmzWr//e9/3Y/v2rXLWrZsaTVr1rRBgwbZu+++aw899JCFhYUlmco50Dz77LNWunRpu+mmm6xbt27ujuW6deusadOm1qRJE3v++eetVatWlj9/fsaCmNnixYstW7ZsSTpEl3dCe/XqZTfddJOZMX4m0ZNPPmk33nijhYSEWL169WzEiBEWFxdnH3/8sdWtW9duuOEGq1Gjht18881WvXp1d/AJxGCzc+dOd2fxueees+3bt9vOnTvt0UcftZw5c9q7777rsf7BgwftiSeesNatWwdcxflKxowZYy6Xy0qWLOmenj82NtZ9Pi1dutSyZs1qHTp0SDLdcyBIfF/auHGjFShQwPr27WsLFiyw6Ohomzp1qlWvXt0KFy5sU6dONbOE4FOwYEGrWLGitWzZ0nLmzBmwE+sg4yLUOKRnz54WHBxsAwYMSDLWY+TIkRYeHm4vvvhiQH7gX27//v3Wrl07+/33323WrFnmcrmscuXKtmrVKo/1fvnlF3v66aetYsWKVqNGjYCd6ezyDs+8efOsQIECNnfuXBs8eLA1btzYatas6b68YMOGDdalSxerV6+e3XHHHQE74PhyiR2BL774wjJlypQk2CQeo/fee8+qV6/uHuweiC4PczNnzrSIiAibP3++ff3119avXz+rXr269enTx+Lj423fvn02ZcoUe+WVV2z27NkeM+oFkvj4eNu4caO5XC7773//a3379rVs2bK5x2jt2LHDevfubeXKlbNp06Z5PPfo0aPuv81A/htNPGc++ugjGz16tLVt29aqV6/uHidz8eJF9/m1ePFiy5cvX8BVaxL/Njdt2mTZs2e3IUOGJPnyZdWqVda8eXMrXbq0ffPNN2Zm9t1331m3bt2sT58+tnnz5lRvN+A0Qo2DHnnkEStRooRNmjTJTpw44fHYiy++yNSJllCFqVmzprVq1cp69uxp06dPt4YNG1rLli2THeweGxtrFy9eTHYGr0Dy4Ycf2qhRozzuo7JkyRJr1KiRVa9e3R1s/vzzTzt+/Li7kxRonczkXB5sEi9h2bt3r8c6ffr0sbvvvptLMyzhJofDhw+31157zb3szJkz9sYbb1iVKlU8bhp8uUD+wmb48OGWNWtWy5Ejh33//fcej/3yyy/Wp08fK1eunE2fPj3JcwM10FzpdS9ZssTuvPNOq1atmntcjZnZV199ZWYWsF88HDx40CIiIjwuy46Li/P4u1u2bJnlyZPHnn76aY/n8jmAjIpQc40S34jXrFljEydOtKlTp9oXX3zhfrx79+72n//8xyZNmhSws3NdzY4dO+yuu+6yO+64w/bu3Wu//PKL1a9f31q2bOlxr4F/zqQUqDZt2mSVK1e2HDlyeHSK4uPj7fPPP7fGjRtbrVq1kow14jKqv/9eLw822bJlsw4dOtiCBQts06ZN9tRTT1mBAgUC9pvMxFmlzBKqBy6Xy1wulz322GMe68XFxVmTJk2sffv2fmhl2pTYoZw1a5YFBQVZpkyZbMaMGUnuzv7LL79Yv379LHfu3LZw4UJ/NDVNSfy7XL16tY0aNcpefPFFj4lOlixZYnfddZfdcssttmzZMhs+fLjlz5/fDh065K8m+90vv/xiLVq0sNtuu83ef/999/K4uDiLj493H9Nu3bpZzZo17dKlSwH9RQMCA6HmOpg3b56FhYVZvXr1rGTJklaoUCGLiopyP969e3crV66cjRkzJsmHGxJs377dmjdvbs2bN7ft27fb1q1b7dZbb7VWrVrZtGnTbMSIER43lAxkFy9etGnTplnFihWtVq1aScLy0qVLrVKlStajRw8/tTDtSPxgT24q9cRg880331jNmjWtSJEidtNNN1nNmjUDdqzWggULrHfv3rZgwQL3xBO7du2yokWLWqVKleynn37yCMfDhw+3xo0bB/yUsP/8wuDcuXN24cIFGzJkiGXKlMkmTZrkMbujWcLkAS+//HLAdzQT/0bnzZtnefPmtTvuuMOaN29uZcqUcd8DySzhC4h27dpZvnz5rEyZMvbjjz/6q8lpxsaNG619+/ZWv379JMEmUdu2be2OO+7wR/OAVEeo8cHlbxjbtm2z8PBwmzBhgsXFxdn+/ftt8uTJlj17dnviiSfc67Vv395uueUWO378uB9anD7s2LHDI9js2LHDWrVqZRUqVLDSpUvb2rVr/d3EVHel6srFixftv//9r9WoUcPuvvvuJGH5xx9/DPjOUqL//e9/1qlTp2RnyUs8vkeOHLGtW7fa1q1b7c8//0ztJqYJ7777rhUoUMCioqJs9erVZvZ35WH79u2WO3dui4yMtNWrV9uFCxfs5MmTVrt2bevUqZM/m+13l/+NrlmzxpYvX+4xJvDJJ5+0TJky2bvvvusONj169LCdO3e61wn0v9XvvvvOChcu7L7P0dq1ay137tyWKVMmj0un/vjjD9uyZQtfbl1mw4YNyQabS5cu2ZEjR6xNmzY2btw4MwvcSxsROAg1Xnj11VeT3Kdi+fLlVrZsWTty5Ih72dmzZ23ixIlWvHhx+/bbb93LeSO+usuDzdatW+3SpUu2e/fugJ7dxiyhYz5ixAgbO3as+xr9Cxcu2LRp06x27drWunXrZKuAgdpZSvzwPnjwoJUuXdrdWULyPvroIwsNDbW5c+cmud4+8RzasmWL5c6d23Lnzm2NGze2e+65x2rVquW+VC0QO0yXv+ZBgwZZxYoVrUSJElazZk277bbb3I89/fTTFhISYj179rR69epZiRIlGNdgCccvLi7OXn31Vevbt6+ZJUzvX6JECevSpYsNHz7cMmXK5FGxQVKXB5vLZ1wdNGiQlStXLsmYQSCjItSk0MGDB6169eq2bds2j+Vr1qyxnDlz2pdffumxfMeOHRYeHm7z5s1LzWZmCDt27LAWLVpYrVq13N8YB5rLO0tPPfWUFStWzJo0aWKtWrWyG2+80X13+wsXLtj06dOtXr16Vr9+/YC9OWRyPv/8cxs1apR17949yaU/SBAfH2/nzp2zdu3a2dChQz0eO3DggH3yySc2a9Ys9/iibdu2WaFChaxYsWL22WefuQNPoE/c8dprr1nevHlt9erVFhsba88995y5XC6P8ZUvv/yydejQwbp06RLQ012b/f3+lnjeHD9+3L799ls7f/68NWjQwLp3725mZlu3brW8efOay+WykSNH+q296cHlwWb+/Pk2evRoy5Ejh8fkCkBGR6jxQuJ146tWrXJ3kvbv328NGza0hx9+2D1tp1nC7EDVqlXzuPkVUm7r1q3Wrl07++233/zdFL+aMGGCRUREuKszkyZNMpfLZbly5XIH5gsXLthbb71lPXv2ZDKAyySOwypWrJj7/j1I6vz581azZk0bM2aMe9krr7xiLVu2tEyZMlmxYsUsd+7c7nNw+/btFhoaanfeeaft3bs3YM+5y6et7tKli/veM5988omFhoba5MmTzcw8KqiXf+kQqJWaxECzcuVKGzVqlMdNbTdv3mxVqlRxd8T3799v9913n7311lvue9UEun+riG7YsME6d+5s+fLls8yZMwfkJdsIbISaFEgskZuZ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1qBBA6tTpw5Th/8l8dz58MMPrXjx4la0aFErXry4lStXzrZv326XLl2yYcOGWZYsWaxYsWJWqVIlK168OJPrJOORRx6xEiVK2KRJk9yTdyR68cUXr3hJKRCICDXJ+Oijjyxnzpw2aNAgW7dunXt5YrBp1qyZvfrqqzZs2DBzuVxcAwyvREdH2759++ynn36y06dP24kTJ6xEiRJ26623uoNNYqdg6dKlFhQUZOXKlbM1a9b4s9l+c3mlIXv27BYVFWWzZ892z2o2fPhwO3LkiBUqVMiKFi1q+/fvN7OEysLTTz9tERERfPtrnsEme/bsKQo2gerSpUs2Y8YMK1++vHsa9TJlytjdd99tH374oa1YscLatm1r27dvt/j4eFuyZIlVqFDBHbJh9t1331nOnDntnXfesa1bt9p3331nzZo1s8KFC7s74j/88IMtWLDAPvvss4C+jCrx/X7NmjU2ceJEmzp1qseslt27d7f//Oc/NmnSpCQVGwB/I9T8w969e6106dJJ7muR2CHYvn27dezY0apVq2bly5f3CD3A1bz//vt26623WqFChczlclnRokXthRdesCNHjljJkiWtbt26HhWbzz77zHr37m3du3cPyG/LE+3atcuCgoLspZdeci87deqUdejQwUqVKmVmZt9++63lypXL6tWrZ7feequ1adPG8ubNG7Df/v7b/YrWrVtHsLmKmJgY++CDD6xs2bLWoUMHO378uD3++OPWsmVLCw0NNZfL5Z5iPT4+3r7//vuA/hv9p0mTJlmTJk08jklMTIw1adLEqlSpEtCV0+TMmzfPwsLCrF69elayZEkrVKiQRUVFuR/v3r27lStXzsaMGeNxqwkAfyPU/MOGDRusTJky7m924+Pj3d+iJP7/8ePH7dChQ0nGQQD/ZurUqZY1a1abMGGCLV++3L7++mt78MEHLSgoyB566CE7fPiwlSpVyurXr28ff/yx/frrr3bXXXfZ6NGj3dsIxE5TXFycTZo0yVwul7388svuZWZmzz//vFWtWtU9k9Lu3btt5MiR9uijj9rYsWNt586dfmu3P10eaKZPn27Dhw+3fv362c6dO90zNSYGm5ROHhCITp8+be+//74VLFjQY+KJl156yVq0aJFsYA7Ev9HkjBgxwsLDw92/J14++/nnn1vJkiVty5Yt/mpamnD53+i2bdssPDzcJkyYYHFxcbZ//36bPHmyZc+e3Z544gn3eu3bt08yHTaAvxFq/mHNmjWWNWtW9+Bss7/DzNdff20///yzv5qGdGz9+vX2n//8x+bMmeOx/NixY/bWW29ZpkyZbODAgXb27FmrV6+eFSlSxAoXLuwxJWwgO3z4sL3++usWFhZmQ4cONbOE+0iFhobaCy+8YGZ0JpMzcOBAK1CggLVv395dXZ45c6a7U7Ru3ToLDQ212267zX3PFXg6c+aMvf/++1aoUCHr1KmTe3nit+WBOktXYqf83LlzyT6+YcMGK1++vL388sse72Fr16614sWL208//ZQq7UxrXn311SQzpS5fvtzKli3rvqGrWcKYyokTJ1rx4sXt22+/dS9nGmfgyoIEDwUKFNDNN9+s9957Tzt27JAkuVwuSdLMmTM1duxYxcbG+rOJSIf279+vnDlzqkGDBoqLi5MkmZny5s2rjh07atCgQXr77bd1+PBhLV68WHPmzNGMGTP0/fffK3PmzLp06ZKfX4F/FShQQF26dNGzzz6rcePG6bHHHlODBg3UuXNnDR48WJIUFOT5dmZm/mhqmjFp0iR98MEH+vzzz/XBBx/otdde07Zt2/TCCy/o448/VkxMjG655RYtXbpUUsIxDlSJf5OJLj93smfPrtatW+vVV1/VypUr1alTJ0lSrly5FBcX5/58CDRBQUE6cOCAunTpohUrVriXJx67//znP2rYsKEWL16s1157TZJ0+vRpffzxx8qePbsKFizol3b706FDhzR79mzt37/fY3loaKgOHDigzZs3u5dly5ZNTZo00fnz5xUdHe1eXqhQoVRrL5Du+DdT+c/l002uXr3aVq1a5X5s4sSJVqpUKevWrZstXLjQfvzxR+vfv7/dcMMNSWaoAlJi+PDhHpdi/PPb3W3btlnmzJmTVHLMqEBc7o8//rBXX33V8ufPbzfddJN7eSBON/xPl1/OcunSJRs1apS99dZbZvb39fqTJ0+2e+65x8LDw23q1Kl27NixK24jEP3b+/uZM2ds1qxZVqxYMWvRokUqtirt2r17t9WpU8datmzp8Rma+J51+PBh69Wrl5UrV85y5sxptWvXtjx58gTsODezvytbq1atcl8Kun//fmvYsKE9/PDDtnXrVve6Z86csWrVqtns2bP90lYgvQnIUJPYofzoo4+sTJkyVqJECatY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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Bagian 2: Pembersihan Data"
      ],
      "metadata": {
        "id": "qBMikRxbzN_L"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Konversi Tipe Data\n",
        "> ***Nadiyah Shabrina***"
      ],
      "metadata": {
        "id": "u1c_IZYL3n5c"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Ubah kolom ke tipe data numerik\n",
        "df['Quantity'] = pd.to_numeric(df['Quantity'], errors='coerce')\n",
        "df['Price Per Unit'] = pd.to_numeric(df['Price Per Unit'], errors='coerce')\n",
        "df['Total Spent'] = pd.to_numeric(df['Total Spent'], errors='coerce')\n",
        "\n",
        "# Ubah kolom tanggal transaksi menjadi datetime, tidak menggunakkan median\n",
        "df['Transaction Date'] = pd.to_datetime(df['Transaction Date'], errors='coerce')\n",
        "\n",
        "print('Tipe data setiap kolom setelah konversi:')\n",
        "print(df.dtypes)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wk-iV-A43u8k",
        "outputId": "8ffe39c5-bff5-4236-db4b-af9fd7c44c5a"
      },
      "execution_count": 124,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Tipe data setiap kolom setelah konversi:\n",
            "Transaction ID              object\n",
            "Item                        object\n",
            "Quantity                   float64\n",
            "Price Per Unit             float64\n",
            "Total Spent                float64\n",
            "Payment Method              object\n",
            "Location                    object\n",
            "Transaction Date    datetime64[ns]\n",
            "dtype: object\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Penanganan Missing Values\n",
        "\n",
        "Menghapus atau mengisi missing values dengan teknik yang sesuai (mean, median, interpolasi, atau penghapusan).\n",
        "\n",
        "> ***Nadiyah Shabrina***"
      ],
      "metadata": {
        "id": "D9vei_HJzQEG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Mengisi nilai numerik yang hilang/kosong\n",
        "for col in ['Quantity', 'Price Per Unit', 'Total Spent']:\n",
        "    df[col].fillna(df[col].median(), inplace=True)\n",
        "\n",
        "# Hapus baris dengan nilai yang hilang di kolom lainnya\n",
        "df.dropna(subset=['Item', 'Payment Method', 'Location'], inplace=True)\n",
        "# Menghapus baris yang memiliki nilai yang hilang di kolom 'Transaction Date'\n",
        "df.dropna(subset=['Transaction Date'], inplace=True)\n",
        "\n",
        "# Check hasil akhir\n",
        "print(df.isna().sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FdaCd3O9bbMQ",
        "outputId": "989c5254-acdc-4afb-8686-da1fdda875af"
      },
      "execution_count": 126,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Transaction ID      0\n",
            "Item                0\n",
            "Quantity            0\n",
            "Price Per Unit      0\n",
            "Total Spent         0\n",
            "Payment Method      0\n",
            "Location            0\n",
            "Transaction Date    0\n",
            "dtype: int64\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-3497762472.py:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  df[col].fillna(df[col].median(), inplace=True)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Visualisasi Outliers Sebelum Capping\n",
        "> ***Feby Tri Wulandari***"
      ],
      "metadata": {
        "id": "ZTXzVRFo2w9U"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Distribusi Data Numerik\n",
        "numerical_cols = ['Quantity', 'Price Per Unit', 'Total Spent']\n",
        "\n",
        "plt.figure(figsize=(7,5))\n",
        "sns.boxplot(\n",
        "    data=df[numerical_cols],\n",
        "    palette={'Quantity':'#ffffcc', 'Price Per Unit':'#a1dab4', 'Total Spent':'#2c7fb8'},\n",
        "    linewidth=1.2\n",
        ")\n",
        "plt.title(\"Boxplot Sebelum Capping\", fontsize=15)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 470
        },
        "id": "YsqKVbAw2ako",
        "outputId": "4ea9f680-ee88-4148-bd0d-351ce35b7902"
      },
      "execution_count": 127,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 700x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Penanganan Outliers\n",
        "\n",
        "Mengidentifikasi outliers menggunakan metode Boxplot/Z-score/IQR dan menangani outliers yang tidak relevan.\n",
        "\n",
        "> ***Nadiyah Shabrina***"
      ],
      "metadata": {
        "id": "CLTUnEEM3Xkk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Menggunakan IQR untuk menghilangkan outlier\n",
        "numerical_cols = ['Quantity', 'Price Per Unit', 'Total Spent']\n",
        "\n",
        "for col in numerical_cols:\n",
        "    Q1 = df[col].quantile(0.25)\n",
        "    Q3 = df[col].quantile(0.75)\n",
        "    IQR = Q3 - Q1\n",
        "\n",
        "    lower_bound = Q1 - 1.5 * IQR\n",
        "    upper_bound = Q3 + 1.5 * IQR\n",
        "\n",
        "    df[col] = np.where(df[col] < lower_bound, lower_bound, df[col])\n",
        "    df[col] = np.where(df[col] > upper_bound, upper_bound, df[col])\n",
        "\n",
        "print(\"Outlier diolah dengan metode pembatasan capping.\")\n",
        "print(f\"Capping applied pada kolom {col}: min={df[col].min()}, max={df[col].max()}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_vgxIvIWb043",
        "outputId": "fcad7a3c-4b09-4971-c634-3d77e1204713"
      },
      "execution_count": 129,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Outlier diolah dengan metode pembatasan capping.\n",
            "Capping applied pada kolom Total Spent: min=1.0, max=24.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Visualisasi Outliers Setelah Capping\n",
        "> ***Feby Tri Wulandari***"
      ],
      "metadata": {
        "id": "jh8F9drn4nre"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Distribusi Data Numerik\n",
        "plt.figure(figsize=(7,5))\n",
        "sns.boxplot(\n",
        "    data=df[numerical_cols],\n",
        "    palette={'Quantity':'#ffffcc', 'Price Per Unit':'#a1dab4', 'Total Spent':'#2c7fb8'},\n",
        "    linewidth=1.2\n",
        ")\n",
        "plt.title(\"Boxplot Sebelum Capping (Raw Data)\\n\", fontsize=15)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 493
        },
        "id": "yMeYSSmU2VtJ",
        "outputId": "49f1e533-7ca3-401b-cba3-6abdf58fe307"
      },
      "execution_count": 130,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 700x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Penanganan Redundansi Data (Duplikasi)\n",
        "\n",
        "Menghapus duplikasi data dan memastikan data tetap konsisten.\n",
        "\n",
        "> ***Nadiyah Shabrina***"
      ],
      "metadata": {
        "id": "wPOpKSe0495y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Jumlah Jumlah baris duplikat sebelum dihapus:\", df.duplicated().sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tPCZsCLTb6A8",
        "outputId": "3174b2a3-3357-4fc4-ec34-10255f68de99"
      },
      "execution_count": 131,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Jumlah Jumlah baris duplikat sebelum dihapus: 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.drop_duplicates(inplace=True)\n",
        "print(\"Jumlah baris duplikat setelah dihapus:\", df.duplicated().sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5jnXIf42b_UJ",
        "outputId": "01fc74d9-ed3d-4296-b59b-fef693bf24d1"
      },
      "execution_count": 132,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Jumlah baris duplikat setelah dihapus: 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Pengecekan terakhir\n",
        "> ***Nadiyah Shabrina***"
      ],
      "metadata": {
        "id": "n8UGKpXqcCPz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Missing values setelah dibersihkan:\")\n",
        "display(df.isna().sum())\n",
        "\n",
        "print(\"\\nValue ranges setelah outlier diolah:\")\n",
        "display(df[['Quantity', 'Price Per Unit', 'Total Spent']].describe())\n",
        "\n",
        "print(\"\\njumlah baris duplikasi setelah dibersihkan:\")\n",
        "display(df.duplicated().sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 722
        },
        "id": "wxbrEzcPcEoE",
        "outputId": "c1e28deb-8016-48ae-dd77-f0e6df1f6615"
      },
      "execution_count": 133,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Missing values setelah dibersihkan:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Transaction ID      0\n",
              "Item                0\n",
              "Quantity            0\n",
              "Price Per Unit      0\n",
              "Total Spent         0\n",
              "Payment Method      0\n",
              "Location            0\n",
              "Transaction Date    0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Transaction ID</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Item</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Quantity</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Price Per Unit</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total Spent</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Payment Method</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Location</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Transaction Date</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Value ranges setelah outlier diolah:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "          Quantity  Price Per Unit  Total Spent\n",
              "count  4631.000000     4631.000000  4631.000000\n",
              "mean      3.023105        2.958864     8.853379\n",
              "std       1.384621        1.259514     5.825142\n",
              "min       1.000000        1.000000     1.000000\n",
              "25%       2.000000        2.000000     4.000000\n",
              "50%       3.000000        3.000000     8.000000\n",
              "75%       4.000000        4.000000    12.000000\n",
              "max       5.000000        5.000000    24.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2d1dcc92-091f-4792-a142-a211754eb77d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Quantity</th>\n",
              "      <th>Price Per Unit</th>\n",
              "      <th>Total Spent</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>4631.000000</td>\n",
              "      <td>4631.000000</td>\n",
              "      <td>4631.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>3.023105</td>\n",
              "      <td>2.958864</td>\n",
              "      <td>8.853379</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.384621</td>\n",
              "      <td>1.259514</td>\n",
              "      <td>5.825142</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>4.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>3.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>8.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>4.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>12.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>5.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>24.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2d1dcc92-091f-4792-a142-a211754eb77d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2d1dcc92-091f-4792-a142-a211754eb77d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2d1dcc92-091f-4792-a142-a211754eb77d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-d0bc77b0-f9c2-44c9-8599-91e53e9e12c2\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d0bc77b0-f9c2-44c9-8599-91e53e9e12c2')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-d0bc77b0-f9c2-44c9-8599-91e53e9e12c2 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Quantity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1636.3260482535327,\n        \"min\": 1.0,\n        \"max\": 4631.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.023105160872382,\n          3.0,\n          4631.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price Per Unit\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1636.3356262070317,\n        \"min\": 1.0,\n        \"max\": 4631.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2.9588641762038437,\n          3.0,\n          4631.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total Spent\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1634.1041019636411,\n        \"min\": 1.0,\n        \"max\": 4631.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          8.853379399697689,\n          8.0,\n          4631.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "jumlah baris duplikasi setelah dibersihkan:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "np.int64(0)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Bagian 3: Data Preprocessing"
      ],
      "metadata": {
        "id": "6_M4UFDV5XT_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Cek Anomali Data\n",
        "\n",
        "Mendeteksi dan menangani nilai anomali pada kolom kategorikal dengan me-*replace* data yang berisi **ERROR** dan **UNKNOWN** menjadi **Other**.\n",
        "\n",
        "> ***Feby Tri Wulandari***"
      ],
      "metadata": {
        "id": "GfY19LqW5uzp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "categorical_cols = ['Item', 'Payment Method', 'Location']\n",
        "\n",
        "# Nilai unik di setiap kolom kategorikal\n",
        "for col in categorical_cols:\n",
        "    print(f\"{col}: {df[col].unique()}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "T7JzxFlr53o5",
        "outputId": "1866d540-ce4b-4d2d-db6d-4d32bac03205"
      },
      "execution_count": 134,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Item: ['Coffee' 'Cake' 'Cookie' 'Salad' 'UNKNOWN' 'Sandwich' 'Juice' 'Smoothie'\n",
            " 'ERROR' 'Tea']\n",
            "Payment Method: ['Credit Card' 'Cash' 'UNKNOWN' 'Digital Wallet' 'ERROR']\n",
            "Location: ['Takeaway' 'In-store' 'UNKNOWN' 'ERROR']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Identifikasi anomali di setiap kolom kategorikal\n",
        "anomalies = ['UNKNOWN', 'ERROR']\n",
        "\n",
        "for col in categorical_cols:\n",
        "    total = len(df[col])\n",
        "    count_anom = df[col].isin(anomalies).sum()\n",
        "    percent_anom = (count_anom / total) * 100\n",
        "    print(f\"{col}: {count_anom} data anomali ({percent_anom:.2f}%)\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rd5k3Z8h8Os_",
        "outputId": "b4ea8605-1d6a-4bbe-991b-85acd0b941c7"
      },
      "execution_count": 135,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Item: 305 data anomali (6.59%)\n",
            "Payment Method: 353 data anomali (7.62%)\n",
            "Location: 483 data anomali (10.43%)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Drop baris yang berisi anomali pada kolom Item\n",
        "before_item = df.shape[0]\n",
        "df = df[~df['Item'].isin(anomalies)]\n",
        "after_item = df.shape[0]\n",
        "print(f\"\\nItem: {before_item - after_item} baris dihapus \"\n",
        "      f\"({((before_item - after_item)/before_item)*100:.2f}%)\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vzkndOqm9cPh",
        "outputId": "0ef7b1da-4b98-4670-ed8b-301f908447de"
      },
      "execution_count": 136,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Item: 305 baris dihapus (6.59%)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Visualisasi sebelum Preprocessing\n",
        "> ***Feby Tri Wulandari***"
      ],
      "metadata": {
        "id": "lxVAnoeZ_AV_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10,7))\n",
        "df[numerical_cols].hist(\n",
        "    bins=20,\n",
        "    color='#2c7fb8',\n",
        "    edgecolor='black'\n",
        ")\n",
        "plt.suptitle(\"Distribusi Data Numerik Sebelum Preprocessing\", fontsize=15)\n",
        "plt.tight_layout(rect=[0,0,1,0.95])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 509
        },
        "id": "6NJRlq2B_Fha",
        "outputId": "3fc71fe0-0b1f-4ad0-b819-118216e10c4f"
      },
      "execution_count": 141,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x700 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Preprocessing\n",
        "> ***Feby Tri Wulandari***"
      ],
      "metadata": {
        "id": "pejdcAm4_NAH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Encoding Kategorikal\n",
        "df_encoded = pd.get_dummies(df, columns=categorical_cols, drop_first=True)\n",
        "\n",
        "print(\"\\nKolom setelah encoding:\")\n",
        "print(df_encoded.columns)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W4gq7mAQ_YLr",
        "outputId": "8b9312c3-bd71-4f58-e4bd-3a1967834f3c"
      },
      "execution_count": 142,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Kolom setelah encoding:\n",
            "Index(['Transaction ID', 'Quantity', 'Price Per Unit', 'Total Spent',\n",
            "       'Transaction Date', 'Item_Coffee', 'Item_Cookie', 'Item_Juice',\n",
            "       'Item_Salad', 'Item_Sandwich', 'Item_Smoothie', 'Item_Tea',\n",
            "       'Payment Method_Credit Card', 'Payment Method_Digital Wallet',\n",
            "       'Payment Method_Other Payment Method', 'Location_Other Location',\n",
            "       'Location_Takeaway'],\n",
            "      dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Normalisasi / Standardisasi Data Numerik\n",
        "scaler = StandardScaler()\n",
        "df_scaled = df_encoded.copy()\n",
        "df_scaled[numerical_cols] = scaler.fit_transform(df_scaled[numerical_cols])\n",
        "\n",
        "print(\"\\nStatistik numerik setelah standardisasi:\")\n",
        "display(df_scaled[numerical_cols].describe().round(2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        },
        "id": "50ISS_Pk_bm_",
        "outputId": "314b9ee0-9d08-4987-af58-10943dc4f3ea"
      },
      "execution_count": 143,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Statistik numerik setelah standardisasi:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "       Quantity  Price Per Unit  Total Spent\n",
              "count   4326.00         4326.00      4326.00\n",
              "mean       0.00            0.00         0.00\n",
              "std        1.00            1.00         1.00\n",
              "min       -1.46           -1.56        -1.35\n",
              "25%       -0.74           -0.76        -0.83\n",
              "50%       -0.02            0.03        -0.15\n",
              "75%        0.70            0.83         0.54\n",
              "max        1.42            1.62         2.60"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d8439655-9b0f-47c6-b659-4fcc4bc74fe1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Quantity</th>\n",
              "      <th>Price Per Unit</th>\n",
              "      <th>Total Spent</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>4326.00</td>\n",
              "      <td>4326.00</td>\n",
              "      <td>4326.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>1.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>-1.46</td>\n",
              "      <td>-1.56</td>\n",
              "      <td>-1.35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>-0.74</td>\n",
              "      <td>-0.76</td>\n",
              "      <td>-0.83</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>-0.02</td>\n",
              "      <td>0.03</td>\n",
              "      <td>-0.15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>0.70</td>\n",
              "      <td>0.83</td>\n",
              "      <td>0.54</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1.42</td>\n",
              "      <td>1.62</td>\n",
              "      <td>2.60</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d8439655-9b0f-47c6-b659-4fcc4bc74fe1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d8439655-9b0f-47c6-b659-4fcc4bc74fe1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d8439655-9b0f-47c6-b659-4fcc4bc74fe1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-8f00d62d-10a1-42ee-9beb-4bafc0598c3f\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8f00d62d-10a1-42ee-9beb-4bafc0598c3f')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-8f00d62d-10a1-42ee-9beb-4bafc0598c3f button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df_scaled[numerical_cols]\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Quantity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1529.4267943415925,\n        \"min\": -1.46,\n        \"max\": 4326.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.0,\n          -0.02,\n          4326.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price Per Unit\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1529.413712001152,\n        \"min\": -1.56,\n        \"max\": 4326.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.0,\n          0.03,\n          4326.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total Spent\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1529.381021430729,\n        \"min\": -1.35,\n        \"max\": 4326.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.0,\n          -0.15,\n          4326.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Reduksi Dimensi (PCA ke 2 komponen utama)\n",
        "pca = PCA(n_components=2)\n",
        "pca_result = pca.fit_transform(df_scaled[numerical_cols])\n",
        "df_scaled['PCA1'] = pca_result[:, 0]\n",
        "df_scaled['PCA2'] = pca_result[:, 1]"
      ],
      "metadata": {
        "id": "TGlO_Xdx_doH"
      },
      "execution_count": 144,
      "outputs": []
    }
  ]
}